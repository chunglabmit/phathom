"""Synthetic image / data generation

This module provides functions for generating synthetic images and point clouds.
The synthetic data is useful for initial testing of image processing code.

"""
import numpy as np
from skimage.filters import gaussian


def random_points(n, shape):
    """Generate `n` d-dimensional points randomly distributed from the origin to `shape`

    Parameters
    ----------
    n : int
        number of points to generate
    shape : array-like
        indices of the upper limit for each dimension

    Returns
    -------
    points : tuple of index arrays
        d arrays containing n randomly generated indices

    """
    n = int(n)
    if n < 0:
        raise ValueError('n must be a positive integer')
    else:
        try:
            d = len(shape)
            if d == 0:
                raise ValueError('shape must contain at least one integer value')
        except TypeError:
            raise ValueError('shape must be array-like')
    idx = np.random.choice(np.prod(shape), size=n*d, replace=False)
    return np.unravel_index(idx, shape)


def points_to_binary(points, shape, dtype='uint8', cval=255):
    """Convert `points` to a binary image of size `shape` with hot pixels at each point

    Parameters
    ----------
    points : tuple of arrays
        indices of foreground pixels
    shape : array-like
        output image shape
    dtype : str, optional
        data type of the output image
    cval : int or float, optional
        intensity value to place at all points

    Returns
    -------
    binary : array
        resulting binary image

    """
    try:
        if len(points) != len(shape):
            raise ValueError('points and shape need to contain the same number of dimensions')
        else:
            d = len(points)
            if d == 0:
                raise ValueError('points and shape need to be at least 1-dimensional')
    except TypeError:
        raise ValueError('points and shape need to be array-like')
    binary = np.zeros(shape, dtype=dtype)
    binary[points] = cval
    return binary


def uniform_blobs(n, shape, sigma=1):
    """Generate an image with uniformly-shaped, randomly-placed gaussian blobs

    The blob image is generated by gaussian blurring an intermediate image of random points.

    Parameters
    ----------
    n : int
        number of blobs
    shape : tuple
        shape of the output image
    sigma : int or tuple
        gaussian filter width

    Returns
    -------
    blobs : array
        an array containing `n` blobs of size `sigma`

    """
    n = int(n)
    if n < 0:
        raise ValueError('n must be non-negative'):
    elif n == 0:
        print('uniform_blobs was called to generate zero blobs')
    points = random_points(n, shape)
    binary = points_to_binary(points, shape)
    return gaussian(binary, sigma=sigma)